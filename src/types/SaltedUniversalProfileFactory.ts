/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SaltedUniversalProfileFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "changeMainController"
      | "deploy"
      | "getDeployedUniversalProfiles"
      | "getExportedUniversalProfiles"
      | "getUniversalProfilesOwner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "SaltedUniversalProfileDeployed"
      | "SaltedUniversalProfileExported"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "changeMainController",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "deploy", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getDeployedUniversalProfiles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExportedUniversalProfiles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniversalProfilesOwner",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeMainController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedUniversalProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExportedUniversalProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniversalProfilesOwner",
    data: BytesLike
  ): Result;
}

export namespace SaltedUniversalProfileDeployedEvent {
  export type InputTuple = [
    deployer: AddressLike,
    universalProfileAddress: AddressLike
  ];
  export type OutputTuple = [deployer: string, universalProfileAddress: string];
  export interface OutputObject {
    deployer: string;
    universalProfileAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaltedUniversalProfileExportedEvent {
  export type InputTuple = [
    deployer: AddressLike,
    universalProfileAddress: AddressLike
  ];
  export type OutputTuple = [deployer: string, universalProfileAddress: string];
  export interface OutputObject {
    deployer: string;
    universalProfileAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SaltedUniversalProfileFactory extends BaseContract {
  connect(runner?: ContractRunner | null): SaltedUniversalProfileFactory;
  waitForDeployment(): Promise<this>;

  interface: SaltedUniversalProfileFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changeMainController: TypedContractMethod<
    [
      universalProfileAddress: AddressLike,
      newMainController: AddressLike,
      LSP3ProfileMetadata: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  deploy: TypedContractMethod<[salt: BytesLike], [string], "payable">;

  getDeployedUniversalProfiles: TypedContractMethod<
    [universalProfileAddress: AddressLike],
    [string[]],
    "view"
  >;

  getExportedUniversalProfiles: TypedContractMethod<
    [universalProfileAddress: AddressLike],
    [string[]],
    "view"
  >;

  getUniversalProfilesOwner: TypedContractMethod<
    [universalProfileAddress: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changeMainController"
  ): TypedContractMethod<
    [
      universalProfileAddress: AddressLike,
      newMainController: AddressLike,
      LSP3ProfileMetadata: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deploy"
  ): TypedContractMethod<[salt: BytesLike], [string], "payable">;
  getFunction(
    nameOrSignature: "getDeployedUniversalProfiles"
  ): TypedContractMethod<
    [universalProfileAddress: AddressLike],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExportedUniversalProfiles"
  ): TypedContractMethod<
    [universalProfileAddress: AddressLike],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUniversalProfilesOwner"
  ): TypedContractMethod<
    [universalProfileAddress: AddressLike],
    [string],
    "view"
  >;

  getEvent(
    key: "SaltedUniversalProfileDeployed"
  ): TypedContractEvent<
    SaltedUniversalProfileDeployedEvent.InputTuple,
    SaltedUniversalProfileDeployedEvent.OutputTuple,
    SaltedUniversalProfileDeployedEvent.OutputObject
  >;
  getEvent(
    key: "SaltedUniversalProfileExported"
  ): TypedContractEvent<
    SaltedUniversalProfileExportedEvent.InputTuple,
    SaltedUniversalProfileExportedEvent.OutputTuple,
    SaltedUniversalProfileExportedEvent.OutputObject
  >;

  filters: {
    "SaltedUniversalProfileDeployed(address,address)": TypedContractEvent<
      SaltedUniversalProfileDeployedEvent.InputTuple,
      SaltedUniversalProfileDeployedEvent.OutputTuple,
      SaltedUniversalProfileDeployedEvent.OutputObject
    >;
    SaltedUniversalProfileDeployed: TypedContractEvent<
      SaltedUniversalProfileDeployedEvent.InputTuple,
      SaltedUniversalProfileDeployedEvent.OutputTuple,
      SaltedUniversalProfileDeployedEvent.OutputObject
    >;

    "SaltedUniversalProfileExported(address,address)": TypedContractEvent<
      SaltedUniversalProfileExportedEvent.InputTuple,
      SaltedUniversalProfileExportedEvent.OutputTuple,
      SaltedUniversalProfileExportedEvent.OutputObject
    >;
    SaltedUniversalProfileExported: TypedContractEvent<
      SaltedUniversalProfileExportedEvent.InputTuple,
      SaltedUniversalProfileExportedEvent.OutputTuple,
      SaltedUniversalProfileExportedEvent.OutputObject
    >;
  };
}
