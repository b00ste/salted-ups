/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SaltedUniversalProfileFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY"
      | "RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD"
      | "VERSION"
      | "acceptOwnership"
      | "batchCalls"
      | "changeMainController"
      | "deploy"
      | "execute"
      | "executeBatch"
      | "getData"
      | "getDataBatch"
      | "isValidSignature"
      | "owner"
      | "pendingOwner"
      | "renounceOwnership"
      | "setData"
      | "setDataBatch"
      | "supportsInterface"
      | "transferOwnership"
      | "universalReceiver"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContractCreated"
      | "DataChanged"
      | "Executed"
      | "OwnershipRenounced"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "RenounceOwnershipStarted"
      | "SaltedUniversalProfileDeployed"
      | "SaltedUniversalProfileExported"
      | "UniversalReceiver"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchCalls",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMainController",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "deploy", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [BigNumberish[], AddressLike[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "getData", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getDataBatch",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setData",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDataBatch",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "universalReceiver",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchCalls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMainController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDataBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDataBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universalReceiver",
    data: BytesLike
  ): Result;
}

export namespace ContractCreatedEvent {
  export type InputTuple = [
    operationType: BigNumberish,
    contractAddress: AddressLike,
    value: BigNumberish,
    salt: BytesLike
  ];
  export type OutputTuple = [
    operationType: bigint,
    contractAddress: string,
    value: bigint,
    salt: string
  ];
  export interface OutputObject {
    operationType: bigint;
    contractAddress: string;
    value: bigint;
    salt: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataChangedEvent {
  export type InputTuple = [dataKey: BytesLike, dataValue: BytesLike];
  export type OutputTuple = [dataKey: string, dataValue: string];
  export interface OutputObject {
    dataKey: string;
    dataValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutedEvent {
  export type InputTuple = [
    operationType: BigNumberish,
    target: AddressLike,
    value: BigNumberish,
    selector: BytesLike
  ];
  export type OutputTuple = [
    operationType: bigint,
    target: string,
    value: bigint,
    selector: string
  ];
  export interface OutputObject {
    operationType: bigint;
    target: string;
    value: bigint;
    selector: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipRenouncedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RenounceOwnershipStartedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaltedUniversalProfileDeployedEvent {
  export type InputTuple = [
    deployer: AddressLike,
    universalProfileAddress: AddressLike
  ];
  export type OutputTuple = [deployer: string, universalProfileAddress: string];
  export interface OutputObject {
    deployer: string;
    universalProfileAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaltedUniversalProfileExportedEvent {
  export type InputTuple = [
    deployer: AddressLike,
    universalProfileAddress: AddressLike
  ];
  export type OutputTuple = [deployer: string, universalProfileAddress: string];
  export interface OutputObject {
    deployer: string;
    universalProfileAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UniversalReceiverEvent {
  export type InputTuple = [
    from: AddressLike,
    value: BigNumberish,
    typeId: BytesLike,
    receivedData: BytesLike,
    returnedValue: BytesLike
  ];
  export type OutputTuple = [
    from: string,
    value: bigint,
    typeId: string,
    receivedData: string,
    returnedValue: string
  ];
  export interface OutputObject {
    from: string;
    value: bigint;
    typeId: string;
    receivedData: string;
    returnedValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SaltedUniversalProfileFactory extends BaseContract {
  connect(runner?: ContractRunner | null): SaltedUniversalProfileFactory;
  waitForDeployment(): Promise<this>;

  interface: SaltedUniversalProfileFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  VERSION: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  batchCalls: TypedContractMethod<
    [data: BytesLike[]],
    [string[]],
    "nonpayable"
  >;

  changeMainController: TypedContractMethod<
    [
      universalProfileAddress: AddressLike,
      newMainController: AddressLike,
      LSP3ProfileMetadata: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  deploy: TypedContractMethod<[salt: BytesLike], [string], "payable">;

  execute: TypedContractMethod<
    [
      operationType: BigNumberish,
      target: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "payable"
  >;

  executeBatch: TypedContractMethod<
    [
      operationsType: BigNumberish[],
      targets: AddressLike[],
      values: BigNumberish[],
      datas: BytesLike[]
    ],
    [string[]],
    "payable"
  >;

  getData: TypedContractMethod<[dataKey: BytesLike], [string], "view">;

  getDataBatch: TypedContractMethod<
    [dataKeys: BytesLike[]],
    [string[]],
    "view"
  >;

  isValidSignature: TypedContractMethod<
    [dataHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setData: TypedContractMethod<
    [dataKey: BytesLike, dataValue: BytesLike],
    [void],
    "payable"
  >;

  setDataBatch: TypedContractMethod<
    [dataKeys: BytesLike[], dataValues: BytesLike[]],
    [void],
    "payable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [pendingNewOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  universalReceiver: TypedContractMethod<
    [typeId: BytesLike, receivedData: BytesLike],
    [string],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "batchCalls"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "changeMainController"
  ): TypedContractMethod<
    [
      universalProfileAddress: AddressLike,
      newMainController: AddressLike,
      LSP3ProfileMetadata: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deploy"
  ): TypedContractMethod<[salt: BytesLike], [string], "payable">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [
      operationType: BigNumberish,
      target: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeBatch"
  ): TypedContractMethod<
    [
      operationsType: BigNumberish[],
      targets: AddressLike[],
      values: BigNumberish[],
      datas: BytesLike[]
    ],
    [string[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getData"
  ): TypedContractMethod<[dataKey: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getDataBatch"
  ): TypedContractMethod<[dataKeys: BytesLike[]], [string[]], "view">;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [dataHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setData"
  ): TypedContractMethod<
    [dataKey: BytesLike, dataValue: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setDataBatch"
  ): TypedContractMethod<
    [dataKeys: BytesLike[], dataValues: BytesLike[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[pendingNewOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "universalReceiver"
  ): TypedContractMethod<
    [typeId: BytesLike, receivedData: BytesLike],
    [string],
    "payable"
  >;

  getEvent(
    key: "ContractCreated"
  ): TypedContractEvent<
    ContractCreatedEvent.InputTuple,
    ContractCreatedEvent.OutputTuple,
    ContractCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DataChanged"
  ): TypedContractEvent<
    DataChangedEvent.InputTuple,
    DataChangedEvent.OutputTuple,
    DataChangedEvent.OutputObject
  >;
  getEvent(
    key: "Executed"
  ): TypedContractEvent<
    ExecutedEvent.InputTuple,
    ExecutedEvent.OutputTuple,
    ExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipRenounced"
  ): TypedContractEvent<
    OwnershipRenouncedEvent.InputTuple,
    OwnershipRenouncedEvent.OutputTuple,
    OwnershipRenouncedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RenounceOwnershipStarted"
  ): TypedContractEvent<
    RenounceOwnershipStartedEvent.InputTuple,
    RenounceOwnershipStartedEvent.OutputTuple,
    RenounceOwnershipStartedEvent.OutputObject
  >;
  getEvent(
    key: "SaltedUniversalProfileDeployed"
  ): TypedContractEvent<
    SaltedUniversalProfileDeployedEvent.InputTuple,
    SaltedUniversalProfileDeployedEvent.OutputTuple,
    SaltedUniversalProfileDeployedEvent.OutputObject
  >;
  getEvent(
    key: "SaltedUniversalProfileExported"
  ): TypedContractEvent<
    SaltedUniversalProfileExportedEvent.InputTuple,
    SaltedUniversalProfileExportedEvent.OutputTuple,
    SaltedUniversalProfileExportedEvent.OutputObject
  >;
  getEvent(
    key: "UniversalReceiver"
  ): TypedContractEvent<
    UniversalReceiverEvent.InputTuple,
    UniversalReceiverEvent.OutputTuple,
    UniversalReceiverEvent.OutputObject
  >;

  filters: {
    "ContractCreated(uint256,address,uint256,bytes32)": TypedContractEvent<
      ContractCreatedEvent.InputTuple,
      ContractCreatedEvent.OutputTuple,
      ContractCreatedEvent.OutputObject
    >;
    ContractCreated: TypedContractEvent<
      ContractCreatedEvent.InputTuple,
      ContractCreatedEvent.OutputTuple,
      ContractCreatedEvent.OutputObject
    >;

    "DataChanged(bytes32,bytes)": TypedContractEvent<
      DataChangedEvent.InputTuple,
      DataChangedEvent.OutputTuple,
      DataChangedEvent.OutputObject
    >;
    DataChanged: TypedContractEvent<
      DataChangedEvent.InputTuple,
      DataChangedEvent.OutputTuple,
      DataChangedEvent.OutputObject
    >;

    "Executed(uint256,address,uint256,bytes4)": TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;
    Executed: TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;

    "OwnershipRenounced()": TypedContractEvent<
      OwnershipRenouncedEvent.InputTuple,
      OwnershipRenouncedEvent.OutputTuple,
      OwnershipRenouncedEvent.OutputObject
    >;
    OwnershipRenounced: TypedContractEvent<
      OwnershipRenouncedEvent.InputTuple,
      OwnershipRenouncedEvent.OutputTuple,
      OwnershipRenouncedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RenounceOwnershipStarted()": TypedContractEvent<
      RenounceOwnershipStartedEvent.InputTuple,
      RenounceOwnershipStartedEvent.OutputTuple,
      RenounceOwnershipStartedEvent.OutputObject
    >;
    RenounceOwnershipStarted: TypedContractEvent<
      RenounceOwnershipStartedEvent.InputTuple,
      RenounceOwnershipStartedEvent.OutputTuple,
      RenounceOwnershipStartedEvent.OutputObject
    >;

    "SaltedUniversalProfileDeployed(address,address)": TypedContractEvent<
      SaltedUniversalProfileDeployedEvent.InputTuple,
      SaltedUniversalProfileDeployedEvent.OutputTuple,
      SaltedUniversalProfileDeployedEvent.OutputObject
    >;
    SaltedUniversalProfileDeployed: TypedContractEvent<
      SaltedUniversalProfileDeployedEvent.InputTuple,
      SaltedUniversalProfileDeployedEvent.OutputTuple,
      SaltedUniversalProfileDeployedEvent.OutputObject
    >;

    "SaltedUniversalProfileExported(address,address)": TypedContractEvent<
      SaltedUniversalProfileExportedEvent.InputTuple,
      SaltedUniversalProfileExportedEvent.OutputTuple,
      SaltedUniversalProfileExportedEvent.OutputObject
    >;
    SaltedUniversalProfileExported: TypedContractEvent<
      SaltedUniversalProfileExportedEvent.InputTuple,
      SaltedUniversalProfileExportedEvent.OutputTuple,
      SaltedUniversalProfileExportedEvent.OutputObject
    >;

    "UniversalReceiver(address,uint256,bytes32,bytes,bytes)": TypedContractEvent<
      UniversalReceiverEvent.InputTuple,
      UniversalReceiverEvent.OutputTuple,
      UniversalReceiverEvent.OutputObject
    >;
    UniversalReceiver: TypedContractEvent<
      UniversalReceiverEvent.InputTuple,
      UniversalReceiverEvent.OutputTuple,
      UniversalReceiverEvent.OutputObject
    >;
  };
}
